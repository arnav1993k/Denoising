#!/usr/bin/env python
import os
import argparse
import toml
import torch
from patter import ModelFactory
from patter.data import FeaturizerFactory
from patter.decoder import GreedyCTCDecoder


def get_parser():
    parser = argparse.ArgumentParser(description="Patter STT Infer")
    parser.add_argument("model_path", help="Path to model to use for inference")
    parser.add_argument("audio_path", help="Path to model to use for inference")

    return parser


def main():
    args = get_parser().parse_args()

    # initialize the model to test
    model = ModelFactory.load(args.model_path)

    device = "cpu"
    dtype = torch.float
    if torch.cuda.is_available():
        device = "cuda:0"
        dtype = torch.half
        model = model.to(device=device, dtype=dtype)

    featurizer = FeaturizerFactory.from_config(model.input_cfg)
    decoder = GreedyCTCDecoder(model.labels, blank_index=model.blank_index)

    with torch.no_grad():
        feats = featurizer.process(args.audio_path).to(dtype=dtype, device=device)
        seq_len = torch.tensor([feats.shape[1]], dtype=torch.int, device=device)
        logits, _ = model(feats.unsqueeze(0), seq_len)
        decoded, _, _ = decoder.decode(logits)

        print("{}: {}".format(os.path.basename(args.audio_path), decoded[0][0]))


if __name__ == '__main__':
    main()
